/**********************************************************************
* ?2008 Microchip Technology Inc.
*
* FileName:        I2C Slave Lite.c
* Dependencies:    Header (.h) files if applicable, see below
* Processor:       PIC24Fxxxx
* Compiler:        MPLAB?C30 v3.20 or higher
*
* SOFTWARE LICENSE AGREEMENT:
* Microchip Technology Incorporated ("Microchip") retains all 
* ownership and intellectual property rights in the code accompanying
* this message and in all derivatives hereto.  You may use this code,
* and any derivatives created by any person or entity by or on your 
* behalf, exclusively with Microchip's proprietary products.  Your 
* acceptance and/or use of this code constitutes agreement to the 
* terms and conditions of this notice.
*
* CODE ACCOMPANYING THIS MESSAGE IS SUPPLIED BY MICROCHIP "AS IS". NO 
* WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT 
* NOT LIMITED TO, IMPLIED WARRANTIES OF NON-INFRINGEMENT, 
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS 
* CODE, ITS INTERACTION WITH MICROCHIP'S PRODUCTS, COMBINATION WITH 
* ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION. 
*
* YOU ACKNOWLEDGE AND AGREE THAT, IN NO EVENT, SHALL MICROCHIP BE 
* LIABLE, WHETHER IN CONTRACT, WARRANTY, TORT (INCLUDING NEGLIGENCE OR
* BREACH OF STATUTORY DUTY), STRICT LIABILITY, INDEMNITY, 
* CONTRIBUTION, OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
* EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, FOR COST OR 
* EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE CODE, HOWSOEVER 
* CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE
* DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT ALLOWABLE BY LAW, 
* MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY RELATED TO THIS
* CODE, SHALL NOT EXCEED THE PRICE YOU PAID DIRECTLY TO MICROCHIP 
* SPECIFICALLY TO HAVE THIS CODE DEVELOPED.
*
* You agree that you are solely responsible for testing the code and 
* determining its suitability.  Microchip has no obligation to modify,
* test, certify, or support the code.
*
* REVISION HISTORY:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Author        Date      	Comments on this revision
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Albert Z.		04/02/09	First release of source file
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
* ADDITIONAL NOTES:
* Code Tested on:
* 16 bit 28-pin Demo board with PIC24FJ64GA002 controller
* The Processor starts with the External Crystal.
*
* 
**********************************************************************/

#include "p24fxxxx.h"

#define USE_AND_OR	// To enable AND_OR mask setting for I2C. 
#include <i2c.h>

#ifdef __PIC24FJ64GA002__	//Defined by MPLAB when using 24FJ64GA004 device
	_CONFIG1( JTAGEN_OFF & GCP_OFF & GWRP_OFF & COE_OFF & FWDTEN_OFF & ICS_PGx1) 
	_CONFIG2( FCKSM_CSDCMD & OSCIOFNC_OFF & POSCMOD_HS & FNOSC_PRIPLL & I2C1SEL_SEC & IOL1WAY_ON)
#endif


unsigned char i2c_i;		// used for i2c transceiving 
unsigned char tx_data[] = {'M', 'C', 'H', 'P', ' ', 'I', '2', 'C', '\0'};
unsigned char rx_data[7];	// "PIC24F"

int main (void)
{
	// Disable Watch Dog Timer
	RCONbits.SWDTEN = 0;

	AD1PCFGbits.PCFG12 = 1;	// config RB12 in digital mode
	ODCBbits.ODB12 = 0;		// disable open-drain mode
	TRISBbits.TRISB12 = 0;	// GB12 as output

	mI2C2_SlaveClearIntr();		// clears the I2C Slave interrupt flag
	EnableIntSI2C2();			// enables I2C Slave Interrupt
	
	//Enable channel
	OpenI2C2( I2C_ON, 0 );		// BRG is not used for I2C slave

	I2C2ADD = 0x61;	/* 0b1100001 Slave MCU address (customized)
					 * 4 msb is 1100, customized as slave MCU
					 * 3 lsb is 001, customized as the first slave MCU
					 */
	while(1);
	
	return 0;
}

void __attribute__((interrupt, no_auto_psv)) _SI2C2Interrupt(void)
{
	
	if (I2C2STATbits.D_A==0) {
		// address byte
		i2c_i = 0;			// clear array to first
		rx_data[i2c_i] = SlavegetcI2C2();
		
		if (I2C2STATbits.R_W) {
			// read from slave
			SlaveputcI2C2(tx_data[i2c_i++]);	// put one char to i2c buffer
		}	
	} else {
		// data byte
		if (I2C2STATbits.R_W) {
			// read from slave
			SlaveputcI2C2(tx_data[i2c_i++]);	// put one char to i2c buffer
		} else {
			// write to slave
			rx_data[i2c_i++] = SlavegetcI2C2();	// get one char from i2c buffer
		}
		__builtin_btg((unsigned int *)&LATB, 12);
	}
	
	mI2C2_SlaveClearIntr();		// clears the I2C Slave interrupt flag
}

